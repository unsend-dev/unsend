# generated by datamodel-codegen:
#   filename:  openapi.json
#   timestamp: 2025-09-05T05:13:32+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, EmailStr, Field, constr


class Status(Enum):
    NOT_STARTED = 'NOT_STARTED'
    PENDING = 'PENDING'
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'
    TEMPORARY_FAILURE = 'TEMPORARY_FAILURE'


class V1DomainsGetResponseItem(BaseModel):
    id: float = Field(..., description='The ID of the domain', example=1)
    name: str = Field(..., description='The name of the domain', example='example.com')
    teamId: float = Field(..., description='The ID of the team', example=1)
    status: Status
    region: Optional[str] = 'us-east-1'
    clickTracking: Optional[bool] = False
    openTracking: Optional[bool] = False
    publicKey: str
    dkimStatus: Optional[str] = None
    spfDetails: Optional[str] = None
    createdAt: str
    updatedAt: str
    dmarcAdded: Optional[bool] = False
    isVerifying: Optional[bool] = False
    errorMessage: Optional[str] = None
    subdomain: Optional[str] = None


class V1DomainsGetResponse(BaseModel):
    __root__: List[V1DomainsGetResponseItem]


class V1DomainsPostRequest(BaseModel):
    name: str
    region: str


class V1DomainsPostResponse(BaseModel):
    id: float = Field(..., description='The ID of the domain', example=1)
    name: str = Field(..., description='The name of the domain', example='example.com')
    teamId: float = Field(..., description='The ID of the team', example=1)
    status: Status
    region: Optional[str] = 'us-east-1'
    clickTracking: Optional[bool] = False
    openTracking: Optional[bool] = False
    publicKey: str
    dkimStatus: Optional[str] = None
    spfDetails: Optional[str] = None
    createdAt: str
    updatedAt: str
    dmarcAdded: Optional[bool] = False
    isVerifying: Optional[bool] = False
    errorMessage: Optional[str] = None
    subdomain: Optional[str] = None


class V1DomainsIdVerifyPutResponse(BaseModel):
    message: str


class Status2(Enum):
    SCHEDULED = 'SCHEDULED'
    QUEUED = 'QUEUED'
    SENT = 'SENT'
    DELIVERY_DELAYED = 'DELIVERY_DELAYED'
    BOUNCED = 'BOUNCED'
    REJECTED = 'REJECTED'
    RENDERING_FAILURE = 'RENDERING_FAILURE'
    DELIVERED = 'DELIVERED'
    OPENED = 'OPENED'
    CLICKED = 'CLICKED'
    COMPLAINED = 'COMPLAINED'
    FAILED = 'FAILED'
    CANCELLED = 'CANCELLED'


class EmailEvent(BaseModel):
    emailId: str
    status: Status2
    createdAt: str
    data: Optional[Any] = None


class V1EmailsEmailIdGetResponse(BaseModel):
    id: str
    teamId: float
    to: Union[str, List[str]]
    replyTo: Optional[Union[str, List[str]]] = None
    cc: Optional[Union[str, List[str]]] = None
    bcc: Optional[Union[str, List[str]]] = None
    from_: str = Field(..., alias='from')
    subject: str
    html: str
    text: str
    createdAt: str
    updatedAt: str
    emailEvents: List[EmailEvent]


class V1EmailsEmailIdPatchRequest(BaseModel):
    scheduledAt: datetime


class V1EmailsEmailIdPatchResponse(BaseModel):
    emailId: Optional[str] = None


class LatestStatus(Enum):
    SCHEDULED = 'SCHEDULED'
    QUEUED = 'QUEUED'
    SENT = 'SENT'
    DELIVERY_DELAYED = 'DELIVERY_DELAYED'
    BOUNCED = 'BOUNCED'
    REJECTED = 'REJECTED'
    RENDERING_FAILURE = 'RENDERING_FAILURE'
    DELIVERED = 'DELIVERED'
    OPENED = 'OPENED'
    CLICKED = 'CLICKED'
    COMPLAINED = 'COMPLAINED'
    FAILED = 'FAILED'
    CANCELLED = 'CANCELLED'


class Datum(BaseModel):
    id: str
    to: Union[str, List[str]]
    replyTo: Optional[Union[str, List[str], Any]] = None
    cc: Optional[Union[str, List[str], Any]] = None
    bcc: Optional[Union[str, List[str], Any]] = None
    from_: str = Field(..., alias='from')
    subject: str
    html: str
    text: str
    createdAt: str
    updatedAt: str
    latestStatus: LatestStatus
    scheduledAt: datetime
    domainId: float


class V1EmailsGetResponse(BaseModel):
    data: List[Datum]
    count: float


class Attachment(BaseModel):
    filename: constr(min_length=1)
    content: constr(min_length=1)


class V1EmailsPostRequest(BaseModel):
    to: Union[str, List[str]]
    from_: str = Field(..., alias='from')
    subject: Optional[constr(min_length=1)] = Field(
        None, description='Optional when templateId is provided'
    )
    templateId: Optional[str] = Field(
        None, description='ID of a template from the dashboard'
    )
    variables: Optional[Dict[str, str]] = None
    replyTo: Optional[Union[EmailStr, List[EmailStr]]] = None
    cc: Optional[Union[EmailStr, List[EmailStr]]] = None
    bcc: Optional[Union[EmailStr, List[EmailStr]]] = None
    text: Optional[constr(min_length=1)] = None
    html: Optional[constr(min_length=1)] = None
    attachments: Optional[List[Attachment]] = Field(None, max_items=10)
    scheduledAt: Optional[datetime] = None
    inReplyToId: Optional[str] = None


class V1EmailsPostResponse(BaseModel):
    emailId: Optional[str] = None


class V1EmailsBatchPostRequestItem(BaseModel):
    to: Union[str, List[str]]
    from_: str = Field(..., alias='from')
    subject: Optional[constr(min_length=1)] = Field(
        None, description='Optional when templateId is provided'
    )
    templateId: Optional[str] = Field(
        None, description='ID of a template from the dashboard'
    )
    variables: Optional[Dict[str, str]] = None
    replyTo: Optional[Union[EmailStr, List[EmailStr]]] = None
    cc: Optional[Union[EmailStr, List[EmailStr]]] = None
    bcc: Optional[Union[EmailStr, List[EmailStr]]] = None
    text: Optional[constr(min_length=1)] = None
    html: Optional[constr(min_length=1)] = None
    attachments: Optional[List[Attachment]] = Field(None, max_items=10)
    scheduledAt: Optional[datetime] = None
    inReplyToId: Optional[str] = None


class V1EmailsBatchPostRequest(BaseModel):
    __root__: List[V1EmailsBatchPostRequestItem] = Field(..., max_items=100)


class Datum1(BaseModel):
    emailId: str


class V1EmailsBatchPostResponse(BaseModel):
    data: List[Datum1]


class V1EmailsEmailIdCancelPostResponse(BaseModel):
    emailId: Optional[str] = None


class V1ContactBooksContactBookIdContactsPostRequest(BaseModel):
    email: str
    firstName: Optional[str] = None
    lastName: Optional[str] = None
    properties: Optional[Dict[str, str]] = None
    subscribed: Optional[bool] = None


class V1ContactBooksContactBookIdContactsPostResponse(BaseModel):
    contactId: Optional[str] = None


class V1ContactBooksContactBookIdContactsGetResponseItem(BaseModel):
    id: str
    firstName: Optional[str] = None
    lastName: Optional[str] = None
    email: str
    subscribed: Optional[bool] = True
    properties: Dict[str, str]
    contactBookId: str
    createdAt: str
    updatedAt: str


class V1ContactBooksContactBookIdContactsGetResponse(BaseModel):
    __root__: List[V1ContactBooksContactBookIdContactsGetResponseItem]


class V1ContactBooksContactBookIdContactsContactIdPatchRequest(BaseModel):
    firstName: Optional[str] = None
    lastName: Optional[str] = None
    properties: Optional[Dict[str, str]] = None
    subscribed: Optional[bool] = None


class V1ContactBooksContactBookIdContactsContactIdPatchResponse(BaseModel):
    contactId: Optional[str] = None


class V1ContactBooksContactBookIdContactsContactIdGetResponse(BaseModel):
    id: str
    firstName: Optional[str] = None
    lastName: Optional[str] = None
    email: str
    subscribed: Optional[bool] = True
    properties: Dict[str, str]
    contactBookId: str
    createdAt: str
    updatedAt: str


class V1ContactBooksContactBookIdContactsContactIdPutRequest(BaseModel):
    email: str
    firstName: Optional[str] = None
    lastName: Optional[str] = None
    properties: Optional[Dict[str, str]] = None
    subscribed: Optional[bool] = None


class V1ContactBooksContactBookIdContactsContactIdPutResponse(BaseModel):
    contactId: str


class V1ContactBooksContactBookIdContactsContactIdDeleteResponse(BaseModel):
    success: bool

class APIError(BaseModel):
    code: str
    message: str
